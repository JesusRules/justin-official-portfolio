/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.12 MiniJesus.gltf --transform 
Files: MiniJesus.gltf [8.25MB] > MiniJesus-transformed.glb [499.31KB] (94%)
*/

import React, { useRef, useState, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';
import * as THREE from 'three';

export function MiniJesus(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/models/MiniJesus-transformed.glb')
  const { actions, names, ref } = useAnimations(animations, group)

  //MINE
  const [hovered, setHovered] = useState(false);
  const [index, setIndex] = useState(3); //IDLE
  const mixer = new THREE.AnimationMixer();
  const [isAnimating, setIsAnimating] = useState(false);
  const animationsSequence = [0, 1, 2];

  useEffect(() => {
    // actions['FirstPlaceWin'].setDuration(.6);
    actions['FirstPlaceWin'].loop = THREE.LoopOnce;

    console.log("ANIMATIONS", animations);

    if (animations && animations.length > 0) {
      animations.forEach((clip) => {
        mixer.clipAction(clip);
      })
      // playAnimationInSequence(0);
    }
  }, [])

  const playAnimationInSequence = (index) => {
    if (index >= animationsSequence.length) {
      setIsAnimating(false);
      return;
    }

    setIsAnimating(true);
    const animationIndex = animationsSequence[index];
    const action = mixer.clipAction(animations[animationIndex]);
    action.reset();
    action.play();
    action.clampWhenFinished = true;
    action.timeScale = 1;

    action.finished.then(() => {
      setActiveAnimationIndex(index + 1);
    })
  }
  

  useEffect(() => {
    console.log('ACTIONS', actions);
    actions[names[index]].reset().fadeIn(0.5).play();
    return () => actions[names[index]].fadeOut(0.5);
  }, [index, actions, names])
  
  useFrame((state) => {
  })
  
  const clickedJesus = () => {
    setIndex(2);
  }

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="MiniJesus" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.Hip_J} />
        </group>
        <group castShadow name="Mini_Jesus" rotation={[Math.PI / 2, 0, 0]} scale={0.01}
           onPointerOver={() => setHovered(true)} 
           onPointerOut={() => setHovered(false)} 
           onClick={() => clickedJesus()}
          >
          <skinnedMesh name="Mesh" geometry={nodes.Mesh.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Mesh.skeleton} />
          <skinnedMesh name="Mesh_1" geometry={nodes.Mesh_1.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Mesh_1.skeleton} />
          <skinnedMesh name="Mesh_2" geometry={nodes.Mesh_2.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Mesh_2.skeleton} />
          <skinnedMesh name="Mesh_3" geometry={nodes.Mesh_3.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Mesh_3.skeleton} />
          <skinnedMesh name="Mesh_4" geometry={nodes.Mesh_4.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Mesh_4.skeleton} />
          <skinnedMesh name="Mesh_5" geometry={nodes.Mesh_5.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Mesh_5.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/MiniJesus-transformed.glb')
